<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Controller与Action</title>
     <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Le styles -->
    <link href="css/bootstrap.css" rel="stylesheet">
</head>
<body>

    <p>
        所有的控制器都放在Controllers目录下，所有的控制器都需要用Web<span style=" color:#000000;">.</span>App<span 
            style=" color:#000000;">.</span>RegisterController来注册。这是有Go反射特性所决定的，因为我没办法用反射来获取包中所有的struct。下面是Home控制器的示例代码：</p>
    <p>
        <pre>        
package Controllers

import (
	"Model"
	"System/Web"
	"fmt"
)

type Home struct {
	Web.Controller
}

//注册Controller
func init() {
	Web.App.RegisterController(Home{})
}       
 </pre>在GoMvc中并没有实现Filter(过滤器的功能)，只提供了<span style=" color:#000000;">OnLoad，UnLoad两个函数，OnLoad在页面加载时，即Action执行之前调，该函数没有任何返回值。UnLoad，在页面结束时，即Action已经执行完，页面已输出展示时执行。如用户登录的判断可以放在OnLoad中执行。</span></p>
<p>
    另外<span style=" color:#000000;">提供了ResponseEnd函数，在调用了ResponseEnd后，请求将结束，如在OnLoad中调用了this.ResponseEnd()，Action将得不到执行，请求结束。</span></p>
<p>
    </p>
<p>
  <b>Action</b>的返回结果通常为IActionResult对像，有ViewResult、JavaScriptResult、JsonResult、XmlResult。具体实现可以参考&quot;System/Web/Controller.go&quot;文件中的实代码。下面分别介绍：</p>
<ul>
<li><b>ViewResult:</b>表示当前返回结果为HTML页面，通常用法如下：
<pre>
func (this *Home) Index() *Web.ViewResult {
	this.ViewData["Title"] = "欢迎使用GoMvc"
	return this.View()
}
</pre>
this.View接受一到两个参数，第一个参数为模板的名称，第二个为主题的名称，两个参数都可以省略，
第一个参数省略时或为""时，Action做为模板名称，第二个参数省略时为默认的主题。  
模板引擎将会在Views/Home目录下去找Index.ghtm文件，并展示到前端。Action 通过ViewData来向View模板传送数据的。在模板中展示ViewData中的数据，如下所示：
<pre>
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;
&lt;head&gt;
     &lt;title&gt;{{.Title}}&lt;/title&gt;
</pre>
有关模板的语法，可以参考<a href="http://golang.org/pkg/text/template/">官方文档</a>。
</li>
<li>
<b>JavaScriptResult:</b>用来返回一段JavaScript脚本，示例代码如下：
<pre>
func (this *Home) Script() *Web.JavaScriptResult {
	return this.JavaScript("alert('OK!');", "utf-8")
}
</pre>
第一个参数为要输出的脚本，第二个参数是字符编码，可省略，默认为utf-8。
</li>
<li>
<b>JsonResult:</b>用来输出JSON字符串，示例代码如下：
<pre>
func (this *Home) TestJson() *Web.JsonResult {
	this.ViewData["UserName"] = "张三"
	this.ViewData["AGe"] = "30"
	return this.Json(this.ViewData, "utf-8")
}
</pre>
第一个参数可以是JSON字符串，struct或map对象，第二个参数是字符编码，可省略，默认为utf-8。当第一个参数为map[string]interface{}类型时，map的key中不能包含Action，Controller，Request键值，这些在展示时会被屏蔽掉。
主要是因为ViewData中，默认会有Action,Controller,Request几个值，如果不屏蔽这几个值，this.Json(this.ViewData, "utf-8")得到的将不是我们想要的结果。
</li>
<li>
<b>XmlResult:</b>用来输出XML文档，示例代码如下：
<pre>
type User struct {
	UserName string
	Age      int
}

func (this *Home) TestXml() *Web.XmlResult {
	u := User{"张三", 19}
	return this.Xml(u, "utf-8")
}
</pre>
第一个参数可以是XML字符串或struct结构体，但不能是map对象。第二个参数是字符编码，可省略，默认为utf-8。
</li>
</ul>  
</body>
</html>
